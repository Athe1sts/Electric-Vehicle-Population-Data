import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import math
import pyodbc
import warnings
import colorsys
import re
from mpl_toolkits.basemap import Basemap
from sqlalchemy import create_engine


# Read CSV file
file_path = ''
data = pd.read_csv(file_path)

# Check for missing data
nan_summary = data.isna().sum().to_frame('number of NaN')
print(nan_summary)

# Data cleaning class definition
class CleanData:
    @staticmethod
    def clean_text(text):
        if pd.isna(text):
            return text
        return ' '.join(str(text).strip().split())
    
    @staticmethod
    def clean(data):
        data['Clean Alternative Fuel Vehicle (CAFV) Eligibility'] = data['Clean Alternative Fuel Vehicle (CAFV) Eligibility'].replace({
            'Not eligible due to low battery range': 'Not_Eligible',
            'Eligibility unknown as battery range has not been researched': 'Unverified',
            'Clean Alternative Fuel Vehicle Eligible': 'Eligible'
        })
        data = data.dropna(subset=['County', 'City'], how='all')
        data = data.drop(columns=['Postal Code', '2020 Census Tract', 'DOL Vehicle ID'])
        if 'Model Year' in data.columns:
            data['Model Year'] = pd.to_numeric(data['Model Year'], errors='coerce')
            data['Model Year'] = data['Model Year'].astype('Int64') 
        return data

    @staticmethod
    def fill_na_with_other_column(row, column, other_column, df):
        if pd.isna(row[column]):
            matching_values = df[df[other_column] == row[other_column]][column].dropna()
            if not matching_values.empty:
                return matching_values.iloc[0]
        return row[column]
# Clean the data FIRST
data = CleanData.clean(data)

# Check data after cleaning
print(f"Shape of data after cleaning: {data.shape}")
print("\nMissing values after cleaning:")
print(data.isna().sum())

# Define function to connect to SQL and upload CLEANED data
def connect_to_sql():
    try:
        engine = create_engine('', use_setinputsizes=False)
        # Write CLEANED DataFrame to SQL table
        data.to_sql(
            name='Electric_Car', 
            con=engine, 
            if_exists='replace',
            index=False
        )
        # Read data from SQL table to verify
        sql_data = pd.read_sql('SELECT * FROM Electric_Car', con=engine)
        print(sql_data.head())
        
    except Exception as e:
        print(f"Error: {e}")

# Connect to SQL and import CLEANED data
connect_to_sql()

